eports = Exports
addModules = Add Modules
availableModules = Available Modules
classpath = Class Path
cancel = Cancel
created = created
definitelyIncomplete = Definitely incomplete.
dropped = dropped
error = Error
exports = Exports
exception = Exception
loaded = loaded
modified = modified
modulepath = Module Path
noSuchSnippet = no such snippet(s)
notValid = not valid
ok = OK
onlyOneOptionAllowed = Only one option is allowed.
replaced = replaced
reloadingState = Reloading state.
resetingState = Resetting state.
selectedModules = Selected Modules
unknown = unknown

# Javadoc block tags
apiNote = API Note
author = Authors
deprecated = Deprecated
exception = Exceptions
implNote = Implementation Note
implSpec = Implementation Requirements
jls = See the Java Language Specification
param = Parameters
return = Returns
see = See Also
serial = Serial
serialData = Serial Data
serialField = Serial Field
since = Since
throws = Throws
version = Version

# Command help
usage.synopsisHeading = Usage:\u0020
usage.synopsisSubcommandLabel = [COMMAND]
usage.descriptionHeading = %nDescription:%n
usage.commandListHeading = %nCommands:%n
usage.parameterListHeading=%n
usage.optionListHeading = %n

-h = Displays command help.
--help = Displays command help.

.usage.headerHeading = Input Editing%n
.usage.header = The editing capabilities of JShell are similar to that of other common editors. Keyboard keys and key combinations provide line editing shortcuts.%n
.usage.header.0 = Left Arrow      - move cursor left
.usage.header.1 = Right Arrow     - move cursor right
.usage.header.2 = Up Arrow        - move cursor up
.usage.header.3 = Down Arrow      - move cursor down
.usage.header.4 = Ctrl+Up Arrow   - move in history up
.usage.header.5 = Ctrl+Down Arrow - move in history down
.usage.header.6 = Ctrl+Space      - auto completion
.usage.header.7 = Enter           - new line
.usage.header.8 = Shift+Enter     - submit the current text
.usage.header.9 = %n

.usage.description = The description of the commands is published at:
.usage.description.0 = https://docs.oracle.com/en/java/javase/12/tools/jshell.html

usage.description = Input Editing

./drop.usage.description = Drops snippets identified by name, ID, or ID range, making them inactive. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of code snippets.
./env.usage.description.0 = Displays the environment settings, or updates the environment settings and restarts the session.
./env.usage.description.1 = Updates the environment settings with the provided options.
./env.usage.description.2 = Resets the execution state.
./env.usage.description.3 = Runs the startup scripts.
./env.usage.description.4 = Silently replays the history in the order entered. The history includes all valid snippets or /drop commands entered at the jshell prompt, in scripts entered on the command line, or scripts entered with the /open command.
./help.usage.description = Displays information about commands.
./history.usage.description = Displays what was entered in this session.
./imports.usage.description = Displays the current active imports, including those from the startup scripts and scripts that were entered on the command line when JShell was started.
./list.usage.description = Displays a list of snippets and their IDs. If no option is entered, then all active snippets are displayed, but startup snippets aren't.
/list.ids = Displays the snippets identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space.
/list.-all = Displays all snippets, including startup snippets and snippets that failed, were overwritten, or were dropped.
/list.-start = Displays startup snippets that were evaluated when JShell was started.
./methods.usage.description = Displays information about the methods that were entered. If no option is entered, then the name, parameter types, and return type of all active methods are displayed.
/method.ids = Displays information for methods identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of code snippets.
/method.-all = Displays information for all methods, including those added when JShell was started, and methods that failed, were overwritten, or were dropped.
/method.-start = Displays information for startup methods that were added when JShell was started.
./open.usage.description = Opens the file with script specified and reads the snippets into the JShell.
./open.usage.description.0 = The script can be a local file or one of the following predefined scripts:
./open.usage.description.1 = default - loads the default entries, which are commonly used as imports.
./open.usage.description.2 = printing - defines print, println, and printf as jshell methods for use within the session.
/open.default = Loads the default entries, which are commonly used as imports.
/open.printing = Defines print, println, and printf as jshell methods for use within the session.
./reload.usage.description = Restarts the session.
./reload.usage.description.0 = Resets the execution state.
./reload.usage.description.1 = Runs the startup scripts.
./reload.usage.description.2 = Replays the history in the order entered. The history includes all valid snippets or /drop commands entered at the jshell prompt, in scripts entered on the command line, or scripts entered with the /open command.
./rerun.usage.description = Reruns the snippets identified by ID, range of IDs, or name. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. The first item in the list must be an ID or ID range. Use the /list command to see the IDs of the code snippets. The "rerun" name is optional, the ids may follow directly after /.
./reset.usage.description = Discards all entered snippets and restarts the session.
./reset.usage.description.0 = Resets the execution state.
./reset.usage.description.1 = Runs the startup scripts.
./reset.usage.description.2 = History is not replayed. All code that was entered is lost.
./reset.usage.description.3 = Environment settings are maintained.
./save.usage.description = Saves snippets and commands to the file specified. If no options are entered, then active snippets are saved.
/save.ids = Saves the snippets and commands identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of the code snippets.
/save.-all = Saves all snippets, including startup snippets and snippets that were overwritten or failed.
/save.-history = Saves the sequential history of all commands and snippets entered in the current session.
/save.-start = Saves the current startup settings. If no startup scripts were provided, then an empty file is saved.
./set.usage.description = Sets configuration information.
./types.usage.description = Displays classes, interfaces, and enums that were entered. If no option is entered, then all current active classes, interfaces, and enums are displayed.
/types.ids = Displays information for classes, interfaces, and enums identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of the code snippets.
/types.-all = Displays information for all classes, interfaces, and enums, including those added when JShell was started, and classes, interfaces, and enums that failed, were overwritten, or were dropped.
/types.-start = Displays information for startup classes, interfaces, and enums that were added when JShell was started.
./vars.usage.description = Displays the name, type, and value of variables that were entered. If no option is entered, then all current active variables are displayed.
/vars.ids = Displays information for variables identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of the code snippets.
/vars.-all = Displays information for all variables, including those added when JShell was started, and variables that failed, were overwritten, or were dropped.
/vars.-start = Displays information for startup variables that were added when JShell was started.




